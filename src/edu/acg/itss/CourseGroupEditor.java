package edu.acg.itss;

import java.util.*;
import java.io.*;
import java.nio.file.Files;
import javax.swing.*;

/**
 * class is responsible for presenting a GUI for creating/updating/deleting 
 * course groups of any kind supported by the program. Any new group the user 
 * creates, or any changes the user makes to an existing group will only be 
 * saved to disk if and when the user presses the "Save Group" button for the 
 * current group. If the user makes some changes to a group, and then selects 
 * another group, makes changes to that second group and then presses the 
 * "Save Group" button, only the changes made to the second group will be 
 * "committed" to the disk (the changes made to a previous group are lost as
 * soon as the user selects another group.)
 * @author itc
 */
public class CourseGroupEditor extends javax.swing.JFrame {

    private ScheduleParams _params;
    private DefaultListModel _groupsListModel = new DefaultListModel();
    private DefaultListModel _coursesListModel = new DefaultListModel();
    private HashMap<String, String> _name2filenameMap = new HashMap<>();
    
    
    /**
     * Creates new form CourseGroupEditor.
     */
    public CourseGroupEditor() {
        populateListModels();
        initComponents();
    }
    
    
    /**
     * populates the list models in this GUI form.
     */
    private void populateListModels() {
        _params = new ScheduleParams("params.props");
        int Smax = _params.getSmax();
        Course.readAllCoursesFromFile("cls.csv", Smax);
        File cur_dir = new File(".");
        File[] cur_files = cur_dir.listFiles();        
        for (File f : cur_files) {
            if (f.isFile() && f.getName().endsWith("grp")) {
                CourseGroup g = CourseGroup.readCourseGroup(f.getName());
                _name2filenameMap.put(g.getGroupName(), f.getAbsolutePath());
            }
        }
        Iterator<String> name_it = CourseGroup.getCourseGroupNameIterator();
        while (name_it.hasNext()) {
            String cgn = name_it.next();
            _groupsListModel.addElement(cgn);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        _groupCoursesLst = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        _courseCodeFld = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        _courseTitleFld = new javax.swing.JTextField();
        _addCourseBtn = new javax.swing.JButton();
        _removeCourseBtn = new javax.swing.JButton();
        _honorStudentChkBox = new javax.swing.JCheckBox();
        _isExactChkBox = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        _numCoursesFld = new javax.swing.JTextField();
        _numCoursesPerTermChkBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        _minCreditsFld = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        _groupsLst = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        _newGroupNameFld = new javax.swing.JTextField();
        _newGroupBtn = new javax.swing.JButton();
        _removeGroupBtn = new javax.swing.JButton();
        _saveGroupBtn = new javax.swing.JButton();
        _exitBtn = new javax.swing.JButton();
        _concAreaChkBox = new javax.swing.JCheckBox();
        _isCapstoneChkBox = new javax.swing.JCheckBox();
        _softOrderChkBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Courses in Group:");

        _groupCoursesLst.setModel(this._coursesListModel);
        _groupCoursesLst.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        _groupCoursesLst.setToolTipText("select a course from list to show or delete");
        _groupCoursesLst.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                _groupCoursesLstMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(_groupCoursesLst);

        jLabel3.setText("Course Code:");

        jButton1.setText("Find Course");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Course Title:");

        _courseTitleFld.setEditable(false);

        _addCourseBtn.setText("Add Course");
        _addCourseBtn.setEnabled(false);
        _addCourseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _addCourseBtnActionPerformed(evt);
            }
        });

        _removeCourseBtn.setText("Remove Selected Course");
        _removeCourseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _removeCourseBtnActionPerformed(evt);
            }
        });

        _honorStudentChkBox.setText("HonorStudent Constraint");
        _honorStudentChkBox.setEnabled(false);

        _isExactChkBox.setText("#Courses denotes Maximum");
        _isExactChkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _isExactChkBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("#Courses Constraint Value:");

        _numCoursesFld.setText("0");

        _numCoursesPerTermChkBox.setText("#Courses Constraint Value Applies Per TERM");
        _numCoursesPerTermChkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _numCoursesPerTermChkBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("#Credits Min Value:");

        _minCreditsFld.setText("0");

        jLabel7.setText("Existing Groups:");

        _groupsLst.setModel(this._groupsListModel);
        _groupsLst.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        _groupsLst.setToolTipText("select a group from the list to show");
        _groupsLst.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                _groupsLstMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(_groupsLst);

        jLabel8.setText("New Group:");

        _newGroupBtn.setText("New Group");
        _newGroupBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _newGroupBtnActionPerformed(evt);
            }
        });

        _removeGroupBtn.setText("Remove Group");
        _removeGroupBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _removeGroupBtnActionPerformed(evt);
            }
        });

        _saveGroupBtn.setText("Save Group");
        _saveGroupBtn.setEnabled(false);
        _saveGroupBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _saveGroupBtnActionPerformed(evt);
            }
        });

        _exitBtn.setText("Exit");
        _exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _exitBtnActionPerformed(evt);
            }
        });

        _concAreaChkBox.setText("Concentration (Focus) Area Constraint");

        _isCapstoneChkBox.setText("Capstone Project Constraint");
        _isCapstoneChkBox.setEnabled(false);

        _softOrderChkBox.setText("Soft Order Prec. Constraint");
        _softOrderChkBox.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_removeCourseBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(_courseCodeFld, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(_courseTitleFld, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 565, Short.MAX_VALUE)
                                .addComponent(_addCourseBtn)))
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(104, 104, 104)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(_newGroupNameFld))
                                    .addComponent(jScrollPane2)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(_numCoursesPerTermChkBox)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(_isExactChkBox)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel5))
                                            .addComponent(jLabel6))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(_numCoursesFld)
                                            .addComponent(_minCreditsFld, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(_honorStudentChkBox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(_concAreaChkBox)
                                        .addGap(18, 18, 18)
                                        .addComponent(_isCapstoneChkBox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(_softOrderChkBox)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(_newGroupBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(_removeGroupBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(_exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(_saveGroupBtn)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(_removeGroupBtn)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(_newGroupNameFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(_newGroupBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(_courseCodeFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(_courseTitleFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_removeCourseBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(_addCourseBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_honorStudentChkBox)
                    .addComponent(_concAreaChkBox)
                    .addComponent(_isCapstoneChkBox)
                    .addComponent(_softOrderChkBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_isExactChkBox)
                    .addComponent(jLabel5)
                    .addComponent(_numCoursesFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(_numCoursesPerTermChkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(_minCreditsFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_saveGroupBtn)
                    .addComponent(_exitBtn))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void _groupsLstMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__groupsLstMousePressed
        int sel_ind = this._groupsLst.getSelectedIndex();
        if (sel_ind < 0) return;  // sanity test
        String gname = (String) this._groupsListModel.get(sel_ind);
        CourseGroup g = CourseGroup.getCourseGroupByName(gname);
        this._removeCourseBtn.setEnabled(false);
        // show courses
        this._coursesListModel.clear();
        List<String> courses = g.getGroupCodes();
        for (String cname : courses) {
            this._coursesListModel.addElement(cname);
        }
        // tick appropriate check-boxes
        boolean honor = g.isHonorStudentCourseGroup();
        this._honorStudentChkBox.setSelected(honor);
        boolean concentration = g.isConcentrationArea();
        this._concAreaChkBox.setSelected(concentration);
        boolean capstone = g.isCapstoneProjectGroup();
        this._isCapstoneChkBox.setSelected(capstone);
        boolean softorder = g.isSoftOrderPrecedenceConstraint();
        this._softOrderChkBox.setSelected(softorder);
        boolean isexact = g.isCoursesReqdExact();
        this._isExactChkBox.setSelected(isexact);
        int num = g.getMinNumCoursesReqd();
        this._numCoursesFld.setText(Integer.toString(num));
        boolean numcoursesismax = g.isHoldsPerSemester();
        this._numCoursesPerTermChkBox.setSelected(numcoursesismax);
        int numcr = g.getMinNumCreditsReqd();
        this._minCreditsFld.setText(Integer.toString(numcr));
        this._saveGroupBtn.setEnabled(true);
    }//GEN-LAST:event__groupsLstMousePressed

    private void _isExactChkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__isExactChkBoxActionPerformed
        if (this._isExactChkBox.isSelected()) {
            this._numCoursesPerTermChkBox.setSelected(false);
        }
    }//GEN-LAST:event__isExactChkBoxActionPerformed

    private void _numCoursesPerTermChkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__numCoursesPerTermChkBoxActionPerformed
        if (this._numCoursesPerTermChkBox.isSelected()) {
            this._isExactChkBox.setSelected(false);
        }
    }//GEN-LAST:event__numCoursesPerTermChkBoxActionPerformed

    private void _exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__exitBtnActionPerformed
        System.exit(0);
    }//GEN-LAST:event__exitBtnActionPerformed

    private void _removeCourseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__removeCourseBtnActionPerformed
        int sel_ind = this._groupCoursesLst.getSelectedIndex();
        if (sel_ind<0) return;
        this._coursesListModel.remove(sel_ind);
    }//GEN-LAST:event__removeCourseBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String ccode = this._courseCodeFld.getText();
        Course c = Course.getCourseByCode(ccode);
        if (c==null) {
            this._addCourseBtn.setEnabled(false);
            JOptionPane.showConfirmDialog(null, "course "+ccode+" NOT found.");
        }
        else {
            this._courseTitleFld.setText(c.getName());
            this._addCourseBtn.setEnabled(true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void _addCourseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__addCourseBtnActionPerformed
        // don't add course if there are already 2 or more courses in group 
        // and this is a "soft-order" constraint.
        int sel_ind = this._groupsLst.getSelectedIndex();
        if (sel_ind<0) return;
        String gname = (String) this._groupsListModel.get(sel_ind);
        CourseGroup cg = CourseGroup.getCourseGroupByName(gname);
        if (cg==null) {
            JOptionPane.showConfirmDialog(null, "group "+gname+" not found?");
            return;
        }
        if (cg.isSoftOrderPrecedenceConstraint()) {
            int num_crs = this._coursesListModel.getSize();
            if (num_crs>=2) {
                JOptionPane.showConfirmDialog(null, "softorder group must have"+
                                                    " exactly 2 courses in it");
                return;
            }
        }
        String ccode = this._courseCodeFld.getText();
        Course c = Course.getCourseByCode(ccode);
        if (c==null) {
            this._addCourseBtn.setEnabled(false);
            JOptionPane.showConfirmDialog(null, "course "+ccode+" NOT found.");
        }
        else {
            this._courseTitleFld.setText(c.getName());
            // add course to list
            this._coursesListModel.addElement(ccode);
            this._addCourseBtn.setEnabled(false);
        }        
    }//GEN-LAST:event__addCourseBtnActionPerformed

    private void _removeGroupBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__removeGroupBtnActionPerformed
        int sel_ind = this._groupsLst.getSelectedIndex();
        if (sel_ind < 0) return;
        // rename group file with extension ".bak" instead of deleting it
        String groupname = (String) this._groupsListModel.get(sel_ind);
        this._groupsListModel.remove(sel_ind);
        String filename = _name2filenameMap.get(groupname);
        File src = new File(filename);
        File dest = new File(filename+".bak");
        if (dest.exists()) dest.delete();
        try {
            Files.copy(src.toPath(), dest.toPath());
        }
        catch (IOException e) {
            JOptionPane.showConfirmDialog(null, 
                                          "couldn't save file "+
                                          dest.getAbsolutePath());
        }
        src.delete();
        _name2filenameMap.remove(groupname);
        CourseGroup.removeCourseGroup(groupname);
        this._saveGroupBtn.setEnabled(false);
        this._groupCoursesLst.clearSelection();
        // reset the values in the fields
        this._coursesListModel.clear();
        this._removeCourseBtn.setEnabled(false);
        this._honorStudentChkBox.setSelected(false);
        this._concAreaChkBox.setSelected(false);
        this._isCapstoneChkBox.setSelected(false);
        this._softOrderChkBox.setSelected(false);
        this._isExactChkBox.setSelected(false);
        this._numCoursesFld.setText("0");
        this._numCoursesPerTermChkBox.setSelected(false);
        this._minCreditsFld.setText("0");
        this._saveGroupBtn.setEnabled(false);
    }//GEN-LAST:event__removeGroupBtnActionPerformed

    
    private void _newGroupBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__newGroupBtnActionPerformed
        String gname = this._newGroupNameFld.getText();
        // check gname
        CourseGroup cg = CourseGroup.getCourseGroupByName(gname);
        if (cg!=null) {
            JOptionPane.showConfirmDialog(null, "Group w/ name="+gname+
                                                " already exists");
            return;
        }
        cg = CourseGroup.createCourseGroup(gname);
        this._groupsListModel.addElement(gname);
        this._groupsLst.setSelectedIndex(this._groupsListModel.size()-1);
        this._coursesListModel.clear();
        this._removeCourseBtn.setEnabled(false);
        this._honorStudentChkBox.setSelected(cg.isHonorStudentCourseGroup());
        this._concAreaChkBox.setSelected(false);
        this._isCapstoneChkBox.setSelected(cg.isCapstoneProjectGroup());
        this._softOrderChkBox.setSelected(cg.isSoftOrderPrecedenceConstraint());
        this._isExactChkBox.setSelected(false);
        this._numCoursesFld.setText("0");
        this._numCoursesPerTermChkBox.setSelected(false);
        this._minCreditsFld.setText("0");
        this._saveGroupBtn.setEnabled(true);
        // delete new group name from field
        this._newGroupNameFld.setText("");
    }//GEN-LAST:event__newGroupBtnActionPerformed

    
    private void _groupCoursesLstMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__groupCoursesLstMousePressed
        int sel_ind = this._groupCoursesLst.getSelectedIndex();
        if (sel_ind<0) return;
        this._removeCourseBtn.setEnabled(true);
    }//GEN-LAST:event__groupCoursesLstMousePressed

    private void _saveGroupBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__saveGroupBtnActionPerformed
        int sel_ind = this._groupsLst.getSelectedIndex();
        if (sel_ind<0) return;
        String gname = (String) this._groupsListModel.get(sel_ind);
        CourseGroup cg = CourseGroup.getCourseGroupByName(gname);
        if (cg==null) {
            JOptionPane.showConfirmDialog(null, "group "+gname+" not found?");
            return;
        }
        // check if group is softorder, and make sure it has exactly 2 courses
        if (cg.isSoftOrderPrecedenceConstraint()) {
            if (this._coursesListModel.size()!=2) {
                JOptionPane.showConfirmDialog(null, "Soft-order group must "+
                                                    "have exactly 2 courses in"+
                                                    " order");
                return;
            }
        }
        // save the course-group data
        String filename = _name2filenameMap.get(gname);
        
        if (filename==null) filename = gname+".grp";
        try(PrintWriter pw = new PrintWriter(new FileWriter(filename))) {
            // write first line
            pw.print(gname);
            pw.print(";");
            final boolean is_conc_area = this._concAreaChkBox.isSelected();
            pw.print(is_conc_area);
            pw.print(";");
            final boolean per_semester = 
                    this._numCoursesPerTermChkBox.isSelected();
            final boolean is_exact = this._isExactChkBox.isSelected();
            if (per_semester) {
                pw.print("<=");
            }
            else if (is_exact) {
                pw.print("=");
            }
            final int min_num_courses_reqd = 
                    Integer.parseInt(this._numCoursesFld.getText().trim());
            pw.print(min_num_courses_reqd);
            pw.print(";");
            final int min_credits_reqd = 
                    Integer.parseInt(this._minCreditsFld.getText().trim());
            pw.println(min_credits_reqd);
            // write second line using the data in the list-model
            /*
            Iterator<String> cit = cg.getGroupCodes().iterator();
            while (cit.hasNext()) {
                String cname = cit.next();
                pw.print(cname);
                if (cit.hasNext()) pw.print(";");
            }
            */
            final int sz = this._coursesListModel.getSize();
            for (int i=0; i<sz; i++) {
                String code = (String) this._coursesListModel.elementAt(i);
                pw.print(code);
                if (i<sz-1) pw.print(";");
            }
            pw.println();
            pw.flush();
            // no need for pw.close()
            // update in-memory data structures
            if (_name2filenameMap.get(gname)==null) {
                _name2filenameMap.put(gname, filename);
            }
            cg = CourseGroup.readCourseGroup(filename);
            JOptionPane.showConfirmDialog(null, "group "+gname+
                                          " saved in file "+filename);
        }
        catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showConfirmDialog(null, "failed to save group "+gname);
        }
    }//GEN-LAST:event__saveGroupBtnActionPerformed

    
    /**
     * invoke without command-line arguments.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CourseGroupEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CourseGroupEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CourseGroupEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CourseGroupEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CourseGroupEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton _addCourseBtn;
    private javax.swing.JCheckBox _concAreaChkBox;
    private javax.swing.JTextField _courseCodeFld;
    private javax.swing.JTextField _courseTitleFld;
    private javax.swing.JButton _exitBtn;
    private javax.swing.JList<String> _groupCoursesLst;
    private javax.swing.JList<String> _groupsLst;
    private javax.swing.JCheckBox _honorStudentChkBox;
    private javax.swing.JCheckBox _isCapstoneChkBox;
    private javax.swing.JCheckBox _isExactChkBox;
    private javax.swing.JTextField _minCreditsFld;
    private javax.swing.JButton _newGroupBtn;
    private javax.swing.JTextField _newGroupNameFld;
    private javax.swing.JTextField _numCoursesFld;
    private javax.swing.JCheckBox _numCoursesPerTermChkBox;
    private javax.swing.JButton _removeCourseBtn;
    private javax.swing.JButton _removeGroupBtn;
    private javax.swing.JButton _saveGroupBtn;
    private javax.swing.JCheckBox _softOrderChkBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
